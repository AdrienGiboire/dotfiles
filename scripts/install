#!/bin/bash

set -o nounset # error when referencing undefined variable

function config { git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@; }
function die { printf '%s\n' "$1" >&2; exit 1; }
function join { local IFS="$1"; shift; echo "$*"; }
function section { printf '\n%s\n' "=== $1"; }
function showme { printf '%s\n' "$1" >&2; }
function cleanup { $HOME/scripts/uninstall; }
trap cleanup ERR

options=$(getopt -o v -l ruby,node -- "$@")
[ $? -eq 0 ] || die "Incorrect options provided"
eval set -- "$options"

with_ruby=false
with_node=false

while true; do
  case "$1" in
    --ruby)
      with_ruby=true
      ;;
    --node)
      with_node=true
      ;;
    *)
      break
      ;;
  esac
  shift
done

# DEPENDENCIES {{{1
utils=(
  apt-transport-https
  ca-certificates
  curl
  git
  gnupg-agent
  jq
  make
  silversearcher-ag
  software-properties-common
)

section "Installing utils {$(join ' ' ${utils[@]})}"
sudo apt-get install -y $(join ' ' ${utils[@]})
# }}}

# DOCKER {{{1
section "Installing Docker & Compose"

section "+ Docker"
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

section "+ Compose"
sudo apt-get install -y python-dev libffi-dev gcc libc-dev make
sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# }}}

# FETCH SOURCES {{{1
section "Installing Dotfiles"
git clone --bare git@github.com:AdrienGiboire/dotfiles.git $HOME/.dotfiles

mkdir -p $HOME/.config-backup
config checkout
if [ 0 -le $# ]; then
  echo "Checked out config."
else
  echo "Backing up pre-existing dot files."
  config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} $HOME/.config-backup/{}
fi
config checkout
config config status.showUntrackedFiles no
# }}}

$with_ruby && $HOME/scripts/install-ruby
$with_node && $HOME/scripts/install-node

# FZF {{{1
section "Installing FZF"

{
  git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf
  $HOME/.fzf/install
} || {
  showme "Could not install FZF"
}
# }}}

# VIM {{{1
section "Installing Neovim"

{
  [ ! -d $HOME/Applications ] && mkdir $HOME/Applications
  cd $HOME/Applications
  curl -LO https://github.com/neovim/neovim/releases/download/stable/nvim.appimage
  chmod u+x nvim.appimage

  section "+ Install Lemonade for clipboard support over SSH"
  curl -fLo /tmp/lemonade.tar.gz https://github.com/lemonade-command/lemonade/releases/latest/download/lemonade_linux_amd64.tar.gz
  tar -xvzf /tmp/lemonade.tar.gz --directory $HOME/bin/
  rm /tmp/lemonade.tar.gz

  section "+ Install python3 provider (mandatory for some plugins)"
  apt install python3-pip
  python -m pip install --user --upgrade pynvim

  section "+ Install vim-plug"
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  $HOME/Applications/nvim.appimage --headless +'PlugUpdate --sync' +qa

} || {
  showme "Could not install Neovim"
}
# }}}
