#!/usr/bin/env bash

set -e

source ~/.config/bash/functions/utils

db_owner=$1
db_password=$2
db_source_name=$3
db_target_name=$4

function mysql_execute() {
  _debug "Executing SQL Statement: $1"
  echo "owner $db_owner db_password $db_password"
  sudo mysql -u$db_owner -p$db_password -e "$1"
}

function mysql_kill_processes() {
  _log "Killing processes linked to '$db_target_name'..."

  process_list_file="${mysql_data_path}process_list.txt"

  sudo [ -f $process_list_file ] && sudo rm $process_list_file
  mysql_execute "SELECT CONCAT('KILL ',id,';') FROM information_schema.processlist WHERE db='$db_target_name' INTO OUTFILE '$process_list_file';"
  mysql_execute "SOURCE $process_list_file;"
}

mysql_data_path=`mysql_execute "SHOW VARIABLES LIKE 'secure_file_priv';" | tail -1 | cut -f 2`

if mysql_execute "SHOW DATABASES;" | grep $db_target_name; then
  while true ; do
    read -p "Database '$db_target_name' already exists, do you want to reset it to '$db_source_name'? (y/N) " answer </dev/tty
    [ -z $answer ] && answer='n'

    case ${answer:0:1} in
      y|Y )
        mysql_kill_processes

        _log "Dropping database..."
        mysql_execute "DROP DATABASE $db_target_name;"
        break
        ;;
      n|N )
        clone_db=false
        break
        ;;
      * )
        _log 'Please answer yes (y) or no (n).';;
    esac
  done
fi

if $clone_db; then
  mysql_kill_processes

  _log "Creating database..."
  sudo mysqldump -u$db_owner -p$db_password $db_source_name -r /tmp/dump.sql
  mysql_execute "CREATE DATABASE $db_target_name;"
  mysql_execute "USE $db_target_name; SOURCE /tmp/dump.sql;"
  mysql_execute "GRANT ALL ON $db_target_name.* TO '$db_owner'@'localhost'; FLUSH PRIVILEGES;"
fi
