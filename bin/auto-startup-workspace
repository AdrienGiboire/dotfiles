#!/bin/bash

# Pop!_OS Auto Startup and Workspace Management Script
# This script automatically launches applications and assigns them to workspaces
# Similar to i3wm's auto-startup behavior

# Configuration
DELAY_BETWEEN_APPS=2  # seconds to wait between launching apps
WAIT_FOR_WINDOW=3     # seconds to wait for window to appear

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$HOME/.config/auto-startup.log"
}

# Function to wait for an application window to appear
wait_for_window() {
    local app_name="$1"
    local max_wait=10
    local count=0

    while [ $count -lt $max_wait ]; do
        if wmctrl -l | grep -i "$app_name" > /dev/null; then
            log "Window for $app_name found"
            return 0
        fi
        sleep 1
        count=$((count + 1))
    done

    log "Warning: Window for $app_name not found after ${max_wait}s"
    return 1
}

# Function to move window to specific workspace
move_to_workspace() {
    local app_name="$1"
    local workspace="$2"

    # Get window ID
    local window_id=$(wmctrl -l | grep -i "$app_name" | head -1 | awk '{print $1}')

    if [ -n "$window_id" ]; then
        wmctrl -i -r "$window_id" -t "$workspace"
        log "Moved $app_name (ID: $window_id) to workspace $workspace"
    else
        log "Error: Could not find window ID for $app_name"
    fi
}

# Function to set window stacking mode
set_window_mode() {
    local app_name="$1"
    local mode="$2"  # "tiled", "stacked", or "floating"

    # Get window ID
    local window_id=$(wmctrl -l | grep -i "$app_name" | head -1 | awk '{print $1}')

    if [ -n "$window_id" ]; then
        case $mode in
            "stacked")
                # Use Pop Shell's stacking mode
                log "Setting $app_name to stacked mode"
                # Focus the window first
                wmctrl -i -a "$window_id"
                sleep 0.5
                # Send the stacking toggle shortcut (default Super+S)
                xdotool key Super_L+s
                ;;
            "floating")
                log "Setting $app_name to floating mode"
                wmctrl -i -a "$window_id"
                sleep 0.5
                # Send the floating toggle shortcut (default Super+G)
                xdotool key Super_L+g
                ;;
            "tiled")
                log "$app_name will use default tiled mode"
                # Tiled is default, no action needed
                ;;
            *)
                log "Unknown window mode: $mode. Using default stacked mode."
                ;;
        esac
    else
        log "Error: Could not find window ID for $app_name to set mode"
    fi
}

# Function to launch app and assign to workspace with stacking mode
launch_and_assign() {
    local command="$1"
    local app_name="$2"
    local workspace="$3"
    local mode="${4:-stacked}"  # Default to stacked if not specified

    log "Launching: $command (mode: $mode)"

    # Launch the application
    eval "$command" &

    # Wait for the window to appear
    sleep $WAIT_FOR_WINDOW
    wait_for_window "$app_name"

    # Move to desired workspace (0-indexed)
    move_to_workspace "$app_name" "$workspace"

    # Set window stacking mode (always apply the specified mode)
    sleep 1  # Give it a moment to settle in the workspace
    set_window_mode "$app_name" "$mode"

    # Wait before launching next app
    sleep $DELAY_BETWEEN_APPS
}

# Start logging
log "=== Auto Startup Script Started ==="

# Check if required tools are installed, install if missing
if ! command -v wmctrl &> /dev/null; then
    log "wmctrl not found, installing..."
    echo "Installing wmctrl (required for workspace management)..."

    # Try to install wmctrl
    if sudo apt update && sudo apt install wmctrl -y; then
        log "wmctrl installed successfully"
        echo "wmctrl installed successfully"
    else
        log "Error: Failed to install wmctrl"
        echo "Error: Failed to install wmctrl. Please install manually: sudo apt install wmctrl"
        exit 1
    fi
fi

if ! command -v xdotool &> /dev/null; then
    log "xdotool not found, installing..."
    echo "Installing xdotool (required for window mode control)..."

    # Try to install xdotool
    if sudo apt install xdotool -y; then
        log "xdotool installed successfully"
        echo "xdotool installed successfully"
    else
        log "Error: Failed to install xdotool"
        echo "Error: Failed to install xdotool. Please install manually: sudo apt install xdotool"
        exit 1
    fi
fi

# Wait a bit for the desktop to fully load
sleep 5

# =================================
# CONFIGURE YOUR APPLICATIONS HERE
# =================================

# Workspace 0 (1st workspace) - Web Browser
launch_and_assign "flatpak run app.zen_browser.zen" "Zen Browser" 0

# Workspace 1 (2nd workspace) - Web Browser for development
launch_and_assign "com.google.Chrome" "Chrome Browser" 1

# Workspace 2 (3rd workspace) - Terminal
launch_and_assign "warp-terminal" "Warp" 2
launch_and_assign "alacritty" "Alacritty" 2

# Workspace 3 (4th workspace) - Misc
launch_and_assign "nautilus" "Files" 3

# Workspace 4 (5th workspace) - Communication
launch_and_assign "flatpak run com.slack.Slack" "Slack" 4
launch_and_assign "flatpak run com.discordapp.Discord" "Discord" 4

log "=== Auto Startup Script Completed ==="
