#!/bin/bash

[[ $SKIP_GIT_HOOK ]] && exit 0

previous_ref=$1
current_ref=$2
flag=$3

[ $flag -eq 0 ] && exit

function postgres_clone_database() {
  if psql -U $db_owner -lqt | cut -d \| -f 1 | grep -qw $db_owner\_$db_cleaned_branch; then
    while true ; do
      read -p "Database '$db_target_name' already exists, do you want to reset it to '$db_source_name'? (y/N) " answer </dev/tty
      [ -z $answer ] && answer='n'

      case ${answer:0:1} in
        y|Y )
          echo "Killing psql processes linked to '$db_target_name'..."
          psql -tc "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$db_target_name' AND pid <> pg_backend_pid();" -d postgres -U $db_owner

          echo "Dropping database..."
          psql -tc "DROP DATABASE $db_target_name;" -d postgres -U $db_owner
          break
          ;;
        n|N )
          clone_db=false
          break
          ;;
        * )
          echo 'Please answer yes (y) or no (n).';;
      esac
    done
  fi

  if $clone_db; then
    echo "Killing processes linked to '$db_source_name'..."

    echo "Killing psql processes linked to '$db_source_name'..."
    psql -tc "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$db_source_name' AND pid <> pg_backend_pid();" -d postgres -U $db_owner

    echo "Creating database..."
    psql -tc "CREATE DATABASE $db_target_name WITH TEMPLATE $db_source_name OWNER $db_owner;" -d postgres -U $db_owner
  fi
}

function clone_database() {
  db_adapter=`cat config/database.yml | grep -e 'adapter:' | cut -d ':' -f2 | head -1 | sed 's/^[ \t]*//;s/[ \t]*$//'`
  db_owner=`cat config/database.yml | grep -e 'username:' | cut -d ':' -f2 | head -1 | sed 's/^[ \t]*//;s/[ \t]*$//'`
  db_password=`cat config/database.yml | grep -e 'password:' | cut -d ':' -f2 | head -1 | sed 's/^[ \t]*//;s/[ \t]*$//'`

  clone_db=true
  full_db_target_name="${project_name}_${db_cleaned_branch}"
  db_target_name=${full_db_target_name::63}
  db_source_name="${project_name}_${db_cleaned_default}"
  [[ $db_cleaned_default == "master" || $db_cleaned_default == "main" ]] && db_target_name="${project_name}_development"

  echo "Cloning database '$db_source_name' into '$db_target_name'..."

  case $db_adapter in
    "mysql2" )
      mysql-clone-database $db_owner $db_password $db_source_name $db_target_name
      ;;
    "postgres" )
      postgres_clone_database
      ;;
    * )
      echo "Unknown adapter `$adapter`";;
  esac

  echo 'All done here. Happy hacking!'
}

project_name=${PWD##*/}
default=$(git config $project_name.default-database-suffix)
[ -z $default ] &&
  echo 'No default branch set up in your git config.' &&
  echo 'Run `git config '$project_name'.default-database-suffix BRANCH_NAME` to continue.' &&
  echo 'Example: git config '$project_name'.default-database-suffix development' &&
  exit

db_cleaned_default=`echo $default | sed 's/-/_/g' | sed 's/\./__/g'`
gc_cleaned_default=`echo $default | sed 's/__/./g' | sed 's/_/-/g'` # order of sed is of importance
branch=`git symbolic-ref HEAD 2>/dev/null | sed 's/refs\/heads\///'`
if [ -n "$branch" ]; then
  db_cleaned_branch=`echo $branch | sed 's/[\/-]/_/g' | sed 's/\./__/g'`
  gc_cleaned_branch=`echo $branch | sed 's/__/./g' | sed 's/[\/_]/-/g'` # order of sed is of importance
  echo "Checking configuration for database behaviour on checkout to '$branch'..."

  if [ $branch != $default ]; then
    isolate_db=`git config --bool branch.$gc_cleaned_branch.isolate-database`

    if [ -z $isolate_db ]; then
      echo 'No configuration found for current branch database behaviour.'
      while true ; do
        read -p 'Do you want to isolate the database for this branch? (y/N) ' answer </dev/tty
        [ -z $answer ] && answer='n'

        case ${answer:0:1} in
          y|Y )
            git config --bool branch.$gc_cleaned_branch.isolate-database true
            clone_database
            break
            ;;
          n|N )
            git config --bool branch.$gc_cleaned_branch.isolate-database false
            break
            ;;
          * )
            echo 'Please answer yes (y) or no (n).';;
        esac
      done

    else
      echo 'Nothing to do. Happy hacking!'
    fi
  fi
fi
